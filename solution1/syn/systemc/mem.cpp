// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> mem::ap_ST_fsm_state1 = "1";
const sc_lv<2> mem::ap_ST_fsm_state2 = "10";
const sc_lv<32> mem::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mem::ap_const_lv32_1 = "1";
const sc_lv<1> mem::ap_const_lv1_0 = "0";
const sc_lv<1> mem::ap_const_lv1_1 = "1";
const sc_lv<8> mem::ap_const_lv8_1 = "1";
const bool mem::ap_const_boolean_1 = true;

mem::mem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    saved_U = new mem_saved("saved_U");
    saved_U->clk(ap_clk);
    saved_U->reset(ap_rst);
    saved_U->address0(saved_address0);
    saved_U->ce0(saved_ce0);
    saved_U->we0(saved_we0);
    saved_U->d0(temp1_2_fu_89_p3);
    saved_U->q0(saved_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln22_fu_102_p2);
    sensitive << ( tempOutVal );
    sensitive << ( temp1_2_fu_89_p3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_102_p2 );
    sensitive << ( re_read_read_fu_46_p2 );
    sensitive << ( sext_ln23_fu_108_p1 );
    sensitive << ( sext_ln32_fu_127_p1 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_102_p2 );
    sensitive << ( re_read_read_fu_46_p2 );

    SC_METHOD(thread_re_read_read_fu_46_p2);
    sensitive << ( re );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_saved_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( saved_addr_reg_138 );
    sensitive << ( sext_ln11_fu_78_p1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_saved_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_saved_we0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sext_ln11_fu_78_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( addr );

    SC_METHOD(thread_sext_ln11_fu_78_p1);
    sensitive << ( sext_ln11_fu_78_p0 );

    SC_METHOD(thread_sext_ln23_fu_108_p1);
    sensitive << ( addr_read_reg_132 );

    SC_METHOD(thread_sext_ln32_fu_127_p1);
    sensitive << ( tempOutAddr );

    SC_METHOD(thread_temp1_1_fu_83_p2);
    sensitive << ( saved_q0 );

    SC_METHOD(thread_temp1_2_fu_89_p3);
    sensitive << ( we );
    sensitive << ( saved_q0 );
    sensitive << ( temp1_1_fu_83_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    tempOutVal = "00000000";
    tempOutAddr = "0000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, addr, "(port)addr");
    sc_trace(mVcdFile, we, "(port)we");
    sc_trace(mVcdFile, re, "(port)re");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, saved_address0, "saved_address0");
    sc_trace(mVcdFile, saved_ce0, "saved_ce0");
    sc_trace(mVcdFile, saved_we0, "saved_we0");
    sc_trace(mVcdFile, saved_q0, "saved_q0");
    sc_trace(mVcdFile, tempOutVal, "tempOutVal");
    sc_trace(mVcdFile, tempOutAddr, "tempOutAddr");
    sc_trace(mVcdFile, addr_read_reg_132, "addr_read_reg_132");
    sc_trace(mVcdFile, saved_addr_reg_138, "saved_addr_reg_138");
    sc_trace(mVcdFile, sext_ln11_fu_78_p1, "sext_ln11_fu_78_p1");
    sc_trace(mVcdFile, temp1_2_fu_89_p3, "temp1_2_fu_89_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln22_fu_102_p2, "icmp_ln22_fu_102_p2");
    sc_trace(mVcdFile, re_read_read_fu_46_p2, "re_read_read_fu_46_p2");
    sc_trace(mVcdFile, sext_ln23_fu_108_p1, "sext_ln23_fu_108_p1");
    sc_trace(mVcdFile, sext_ln32_fu_127_p1, "sext_ln32_fu_127_p1");
    sc_trace(mVcdFile, sext_ln11_fu_78_p0, "sext_ln11_fu_78_p0");
    sc_trace(mVcdFile, temp1_1_fu_83_p2, "temp1_1_fu_83_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mem.hdltvin.dat");
    mHdltvoutHandle.open("mem.hdltvout.dat");
}

mem::~mem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete saved_U;
}

void mem::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        addr_read_reg_132 = addr.read();
        saved_addr_reg_138 =  (sc_lv<7>) (sext_ln11_fu_78_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_102_p2.read(), ap_const_lv1_0))) {
        tempOutAddr = addr_read_reg_132.read();
        tempOutVal = temp1_2_fu_89_p3.read();
    }
}

void mem::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mem::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mem::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mem::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mem::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mem::thread_icmp_ln22_fu_102_p2() {
    icmp_ln22_fu_102_p2 = (!temp1_2_fu_89_p3.read().is_01() || !tempOutVal.read().is_01())? sc_lv<1>(): (sc_bigint<8>(temp1_2_fu_89_p3.read()) < sc_bigint<8>(tempOutVal.read()));
}

void mem::thread_out_r() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, re_read_read_fu_46_p2.read()))) {
        if (esl_seteq<1,1,1>(icmp_ln22_fu_102_p2.read(), ap_const_lv1_1)) {
            out_r = sext_ln32_fu_127_p1.read();
        } else if (esl_seteq<1,1,1>(icmp_ln22_fu_102_p2.read(), ap_const_lv1_0)) {
            out_r = sext_ln23_fu_108_p1.read();
        } else {
            out_r = "XXXXXXXX";
        }
    } else {
        out_r = "XXXXXXXX";
    }
}

void mem::thread_out_r_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln22_fu_102_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, re_read_read_fu_46_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln22_fu_102_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, re_read_read_fu_46_p2.read())))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void mem::thread_re_read_read_fu_46_p2() {
    re_read_read_fu_46_p2 = re.read();
}

void mem::thread_saved_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        saved_address0 = saved_addr_reg_138.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        saved_address0 =  (sc_lv<7>) (sext_ln11_fu_78_p1.read());
    } else {
        saved_address0 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void mem::thread_saved_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        saved_ce0 = ap_const_logic_1;
    } else {
        saved_ce0 = ap_const_logic_0;
    }
}

void mem::thread_saved_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        saved_we0 = ap_const_logic_1;
    } else {
        saved_we0 = ap_const_logic_0;
    }
}

void mem::thread_sext_ln11_fu_78_p0() {
    sext_ln11_fu_78_p0 = addr.read();
}

void mem::thread_sext_ln11_fu_78_p1() {
    sext_ln11_fu_78_p1 = esl_sext<64,7>(sext_ln11_fu_78_p0.read());
}

void mem::thread_sext_ln23_fu_108_p1() {
    sext_ln23_fu_108_p1 = esl_sext<8,7>(addr_read_reg_132.read());
}

void mem::thread_sext_ln32_fu_127_p1() {
    sext_ln32_fu_127_p1 = esl_sext<8,7>(tempOutAddr.read());
}

void mem::thread_temp1_1_fu_83_p2() {
    temp1_1_fu_83_p2 = (!saved_q0.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(saved_q0.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void mem::thread_temp1_2_fu_89_p3() {
    temp1_2_fu_89_p3 = (!we.read()[0].is_01())? sc_lv<8>(): ((we.read()[0].to_bool())? temp1_1_fu_83_p2.read(): saved_q0.read());
}

void mem::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void mem::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"addr\" :  \"" << addr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"we\" :  \"" << we.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"re\" :  \"" << re.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    addr : IN STD_LOGIC_VECTOR (6 downto 0);
    we : IN STD_LOGIC_VECTOR (0 downto 0);
    re : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ap_vld : OUT STD_LOGIC );
end;


architecture behav of mem is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mem,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.721000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=24,HLS_SYN_LUT=77,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal saved_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal saved_ce0 : STD_LOGIC;
    signal saved_we0 : STD_LOGIC;
    signal saved_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempOutAddr : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal tempOutVal : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal saved_addr_reg_125 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln8_fu_68_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal we_read_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_1_fu_82_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal re_read_read_fu_36_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_77_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_fu_110_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln22_fu_114_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component mem_saved IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    saved_U : component mem_saved
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => saved_address0,
        ce0 => saved_ce0,
        we0 => saved_we0,
        d0 => temp_1_fu_82_p2,
        q0 => saved_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                saved_addr_reg_125 <= zext_ln8_fu_68_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_93_p2 = ap_const_lv1_0) and (we_read_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tempOutAddr <= addr;
                tempOutVal <= temp_1_fu_82_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln14_fu_93_p2 <= "1" when (unsigned(temp_1_fu_82_p2) < unsigned(tempOutVal)) else "0";

    out_r_assign_proc : process(ap_CS_fsm_state2, we_read_read_fu_42_p2, icmp_ln14_fu_93_p2, re_read_read_fu_36_p2, zext_ln32_fu_77_p1, zext_ln18_fu_110_p1, zext_ln22_fu_114_p1)
    begin
        if (((re_read_read_fu_36_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
            if (((icmp_ln14_fu_93_p2 = ap_const_lv1_1) and (we_read_read_fu_42_p2 = ap_const_lv1_1))) then 
                out_r <= zext_ln22_fu_114_p1;
            elsif (((icmp_ln14_fu_93_p2 = ap_const_lv1_0) and (we_read_read_fu_42_p2 = ap_const_lv1_1))) then 
                out_r <= zext_ln18_fu_110_p1;
            elsif ((we_read_read_fu_42_p2 = ap_const_lv1_0)) then 
                out_r <= zext_ln32_fu_77_p1;
            else 
                out_r <= "XXXXXXXX";
            end if;
        else 
            out_r <= "XXXXXXXX";
        end if; 
    end process;


    out_r_ap_vld_assign_proc : process(ap_CS_fsm_state2, we_read_read_fu_42_p2, icmp_ln14_fu_93_p2, re_read_read_fu_36_p2)
    begin
        if ((((re_read_read_fu_36_p2 = ap_const_lv1_1) and (we_read_read_fu_42_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((re_read_read_fu_36_p2 = ap_const_lv1_1) and (icmp_ln14_fu_93_p2 = ap_const_lv1_1) and (we_read_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln14_fu_93_p2 = ap_const_lv1_0) and (re_read_read_fu_36_p2 = ap_const_lv1_1) and (we_read_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    re_read_read_fu_36_p2 <= re;

    saved_address0_assign_proc : process(ap_CS_fsm_state1, saved_addr_reg_125, zext_ln8_fu_68_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            saved_address0 <= saved_addr_reg_125;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            saved_address0 <= zext_ln8_fu_68_p1(7 - 1 downto 0);
        else 
            saved_address0 <= "XXXXXXX";
        end if; 
    end process;


    saved_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            saved_ce0 <= ap_const_logic_1;
        else 
            saved_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    saved_we0_assign_proc : process(ap_CS_fsm_state2, we_read_read_fu_42_p2)
    begin
        if (((we_read_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            saved_we0 <= ap_const_logic_1;
        else 
            saved_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_1_fu_82_p2 <= std_logic_vector(unsigned(saved_q0) + unsigned(ap_const_lv8_1));
    we_read_read_fu_42_p2 <= we;
    zext_ln18_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr),8));
    zext_ln22_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempOutAddr),8));
    zext_ln32_fu_77_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempOutAddr),8));
    zext_ln8_fu_68_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr),64));
end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mem,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=2.780000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.576000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=349,HLS_SYN_LUT=316,HLS_VERSION=2019_1}" *)

module mem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        addr,
        we,
        re,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] addr;
input  [0:0] we;
input  [0:0] re;
output  [7:0] out_r;
output   out_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] out_r;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] saved_address0;
reg    saved_ce0;
wire   [7:0] saved_q0;
wire   [6:0] saved_address1;
reg    saved_ce1;
reg    saved_we1;
reg   [7:0] saved_d1;
reg   [7:0] store;
reg   [6:0] tempOutAddr;
reg   [6:0] prevAddr;
reg   [7:0] tempOutVal;
reg   [0:0] re_read_reg_210;
reg   [0:0] re_read_reg_210_pp0_iter1_reg;
reg   [0:0] re_read_reg_210_pp0_iter2_reg;
reg   [0:0] we_read_reg_214;
reg   [0:0] we_read_reg_214_pp0_iter1_reg;
reg   [0:0] we_read_reg_214_pp0_iter2_reg;
reg   [6:0] addr_read_reg_218;
reg   [6:0] addr_read_reg_218_pp0_iter1_reg;
reg   [6:0] addr_read_reg_218_pp0_iter2_reg;
reg   [6:0] saved_addr_reg_227;
reg   [6:0] saved_addr_reg_227_pp0_iter1_reg;
reg   [6:0] saved_addr_reg_227_pp0_iter2_reg;
reg   [7:0] temp_reg_233;
wire   [0:0] or_ln17_fu_130_p2;
reg   [0:0] or_ln17_reg_238;
wire   [7:0] temp2_1_fu_136_p2;
reg   [7:0] temp2_1_reg_242;
wire   [0:0] icmp_ln20_fu_148_p2;
reg   [0:0] icmp_ln20_reg_247;
wire   [7:0] temp_1_fu_160_p2;
reg   [7:0] temp_1_reg_251;
wire   [0:0] icmp_ln39_fu_165_p2;
reg   [0:0] icmp_ln39_reg_256;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln9_fu_102_p1;
wire    ap_block_pp0_stage0;
wire   [7:0] zext_ln58_fu_187_p1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] zext_ln24_fu_192_p1;
wire   [7:0] zext_ln28_fu_196_p1;
wire   [7:0] zext_ln43_fu_201_p1;
wire   [7:0] zext_ln47_fu_205_p1;
wire   [0:0] icmp_ln17_fu_115_p2;
wire   [0:0] icmp_ln17_1_fu_124_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0;
wire    ap_enable_operation_10;
reg    ap_enable_state1_pp0_iter0_stage0;
wire    ap_enable_operation_12;
reg    ap_enable_state2_pp0_iter1_stage0;
reg    ap_predicate_op58_store_state4;
reg    ap_enable_operation_58;
reg    ap_enable_state4_pp0_iter3_stage0;
reg    ap_predicate_op69_store_state4;
reg    ap_enable_operation_69;
wire    ap_enable_pp0;
reg    ap_condition_137;
reg    ap_condition_283;
reg    ap_condition_142;
reg    ap_condition_288;
reg    ap_condition_280;
reg    ap_condition_293;
reg    ap_condition_226;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 store = 8'd0;
#0 tempOutAddr = 7'd0;
#0 prevAddr = 7'd0;
#0 tempOutVal = 8'd0;
end

mem_saved #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
saved_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(saved_address0),
    .ce0(saved_ce0),
    .q0(saved_q0),
    .address1(saved_address1),
    .ce1(saved_ce1),
    .we1(saved_we1),
    .d1(saved_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_226)) begin
        if ((or_ln17_fu_130_p2 == 1'd1)) begin
            store <= temp_1_fu_160_p2;
        end else if ((or_ln17_fu_130_p2 == 1'd0)) begin
            store <= temp2_1_fu_136_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_226)) begin
        if (((or_ln17_fu_130_p2 == 1'd1) & (icmp_ln39_fu_165_p2 == 1'd0))) begin
            tempOutVal <= temp_1_fu_160_p2;
        end else if (((or_ln17_fu_130_p2 == 1'd0) & (icmp_ln20_fu_148_p2 == 1'd0))) begin
            tempOutVal <= temp2_1_fu_136_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_read_reg_218 <= addr;
        addr_read_reg_218_pp0_iter1_reg <= addr_read_reg_218;
        re_read_reg_210 <= re;
        re_read_reg_210_pp0_iter1_reg <= re_read_reg_210;
        saved_addr_reg_227 <= zext_ln9_fu_102_p1;
        saved_addr_reg_227_pp0_iter1_reg <= saved_addr_reg_227;
        we_read_reg_214 <= we;
        we_read_reg_214_pp0_iter1_reg <= we_read_reg_214;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        addr_read_reg_218_pp0_iter2_reg <= addr_read_reg_218_pp0_iter1_reg;
        re_read_reg_210_pp0_iter2_reg <= re_read_reg_210_pp0_iter1_reg;
        saved_addr_reg_227_pp0_iter2_reg <= saved_addr_reg_227_pp0_iter1_reg;
        we_read_reg_214_pp0_iter2_reg <= we_read_reg_214_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln17_fu_130_p2 == 1'd0) & (we_read_reg_214_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_reg_247 <= icmp_ln20_fu_148_p2;
        temp2_1_reg_242 <= temp2_1_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln17_fu_130_p2 == 1'd1) & (we_read_reg_214_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln39_reg_256 <= icmp_ln39_fu_165_p2;
        temp_1_reg_251 <= temp_1_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((we_read_reg_214_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln17_reg_238 <= or_ln17_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_ln17_fu_130_p2 == 1'd1) & (we_read_reg_214_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((or_ln17_fu_130_p2 == 1'd0) & (we_read_reg_214_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        prevAddr <= addr_read_reg_218_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln39_reg_256 == 1'd0)) | ((or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln20_reg_247 == 1'd0)))) begin
        tempOutAddr <= addr_read_reg_218_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_reg_233 <= saved_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_280)) begin
        if ((1'b1 == ap_condition_288)) begin
            out_r = zext_ln47_fu_205_p1;
        end else if ((1'b1 == ap_condition_142)) begin
            out_r = zext_ln43_fu_201_p1;
        end else if ((1'b1 == ap_condition_283)) begin
            out_r = zext_ln28_fu_196_p1;
        end else if ((1'b1 == ap_condition_137)) begin
            out_r = zext_ln24_fu_192_p1;
        end else if ((we_read_reg_214_pp0_iter2_reg == 1'd0)) begin
            out_r = zext_ln58_fu_187_p1;
        end else begin
            out_r = 'bx;
        end
    end else begin
        out_r = 'bx;
    end
end

always @ (*) begin
    if ((((we_read_reg_214_pp0_iter2_reg == 1'd0) & (re_read_reg_210_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln39_reg_256 == 1'd1) & (or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (re_read_reg_210_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (re_read_reg_210_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln39_reg_256 == 1'd0)) | ((icmp_ln20_reg_247 == 1'd1) & (or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (re_read_reg_210_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (re_read_reg_210_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln20_reg_247 == 1'd0)))) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        saved_ce0 = 1'b1;
    end else begin
        saved_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        saved_ce1 = 1'b1;
    end else begin
        saved_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_293)) begin
        if ((or_ln17_reg_238 == 1'd1)) begin
            saved_d1 = temp_1_reg_251;
        end else if ((or_ln17_reg_238 == 1'd0)) begin
            saved_d1 = temp2_1_reg_242;
        end else begin
            saved_d1 = 'bx;
        end
    end else begin
        saved_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        saved_we1 = 1'b1;
    end else begin
        saved_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_137 = ((or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (icmp_ln20_reg_247 == 1'd0));
end

always @ (*) begin
    ap_condition_142 = ((or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1) & (icmp_ln39_reg_256 == 1'd0));
end

always @ (*) begin
    ap_condition_226 = ((we_read_reg_214_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_280 = ((re_read_reg_210_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001));
end

always @ (*) begin
    ap_condition_283 = ((icmp_ln20_reg_247 == 1'd1) & (or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_condition_288 = ((icmp_ln39_reg_256 == 1'd1) & (or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_condition_293 = ((we_read_reg_214_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_operation_10 = (1'b1 == 1'b1);

assign ap_enable_operation_12 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_58 = (ap_predicate_op58_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_69 = (ap_predicate_op69_store_state4 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state2_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_predicate_op58_store_state4 = ((or_ln17_reg_238 == 1'd0) & (we_read_reg_214_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op69_store_state4 = ((or_ln17_reg_238 == 1'd1) & (we_read_reg_214_pp0_iter2_reg == 1'd1));
end

assign icmp_ln17_1_fu_124_p2 = ((tempOutVal == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_115_p2 = ((prevAddr != addr_read_reg_218_pp0_iter1_reg) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_148_p2 = ((temp2_1_fu_136_p2 < tempOutVal) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_165_p2 = ((temp_1_fu_160_p2 < tempOutVal) ? 1'b1 : 1'b0);

assign or_ln17_fu_130_p2 = (icmp_ln17_fu_115_p2 | icmp_ln17_1_fu_124_p2);

assign saved_address0 = zext_ln9_fu_102_p1;

assign saved_address1 = saved_addr_reg_227_pp0_iter2_reg;

assign temp2_1_fu_136_p2 = (store + 8'd1);

assign temp_1_fu_160_p2 = (temp_reg_233 + 8'd1);

assign zext_ln24_fu_192_p1 = addr_read_reg_218_pp0_iter2_reg;

assign zext_ln28_fu_196_p1 = tempOutAddr;

assign zext_ln43_fu_201_p1 = addr_read_reg_218_pp0_iter2_reg;

assign zext_ln47_fu_205_p1 = tempOutAddr;

assign zext_ln58_fu_187_p1 = tempOutAddr;

assign zext_ln9_fu_102_p1 = addr;

endmodule //mem

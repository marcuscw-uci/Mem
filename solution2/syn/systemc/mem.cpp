// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> mem::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> mem::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mem::ap_const_boolean_1 = true;
const bool mem::ap_const_boolean_0 = false;
const sc_lv<8> mem::ap_const_lv8_0 = "00000000";
const sc_lv<1> mem::ap_const_lv1_1 = "1";
const sc_lv<1> mem::ap_const_lv1_0 = "0";
const sc_lv<8> mem::ap_const_lv8_1 = "1";

mem::mem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    saved_U = new mem_saved("saved_U");
    saved_U->clk(ap_clk);
    saved_U->reset(ap_rst);
    saved_U->address0(saved_address0);
    saved_U->ce0(saved_ce0);
    saved_U->q0(saved_q0);
    saved_U->address1(saved_address1);
    saved_U->ce1(saved_ce1);
    saved_U->we1(saved_we1);
    saved_U->d1(saved_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_condition_137);
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );
    sensitive << ( icmp_ln20_reg_247 );

    SC_METHOD(thread_ap_condition_142);
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );
    sensitive << ( icmp_ln39_reg_256 );

    SC_METHOD(thread_ap_condition_226);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( we_read_reg_214_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_280);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( re_read_reg_210_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_condition_283);
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );
    sensitive << ( icmp_ln20_reg_247 );

    SC_METHOD(thread_ap_condition_288);
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );
    sensitive << ( icmp_ln39_reg_256 );

    SC_METHOD(thread_ap_condition_293);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_operation_10);

    SC_METHOD(thread_ap_enable_operation_12);

    SC_METHOD(thread_ap_enable_operation_58);
    sensitive << ( ap_predicate_op58_store_state4 );

    SC_METHOD(thread_ap_enable_operation_69);
    sensitive << ( ap_predicate_op69_store_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_enable_state1_pp0_iter0_stage0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );

    SC_METHOD(thread_ap_enable_state2_pp0_iter1_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_enable_state4_pp0_iter3_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle_pp0_0to2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_predicate_op58_store_state4);
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );

    SC_METHOD(thread_ap_predicate_op69_store_state4);
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to2 );

    SC_METHOD(thread_icmp_ln17_1_fu_124_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tempOutVal );
    sensitive << ( we_read_reg_214_pp0_iter1_reg );

    SC_METHOD(thread_icmp_ln17_fu_115_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( prevAddr );
    sensitive << ( we_read_reg_214_pp0_iter1_reg );
    sensitive << ( addr_read_reg_218_pp0_iter1_reg );

    SC_METHOD(thread_icmp_ln20_fu_148_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tempOutVal );
    sensitive << ( we_read_reg_214_pp0_iter1_reg );
    sensitive << ( or_ln17_fu_130_p2 );
    sensitive << ( temp2_1_fu_136_p2 );

    SC_METHOD(thread_icmp_ln39_fu_165_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tempOutVal );
    sensitive << ( we_read_reg_214_pp0_iter1_reg );
    sensitive << ( or_ln17_fu_130_p2 );
    sensitive << ( temp_1_fu_160_p2 );

    SC_METHOD(thread_or_ln17_fu_130_p2);
    sensitive << ( icmp_ln17_fu_115_p2 );
    sensitive << ( icmp_ln17_1_fu_124_p2 );

    SC_METHOD(thread_out_r);
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( zext_ln58_fu_187_p1 );
    sensitive << ( zext_ln24_fu_192_p1 );
    sensitive << ( zext_ln28_fu_196_p1 );
    sensitive << ( zext_ln43_fu_201_p1 );
    sensitive << ( zext_ln47_fu_205_p1 );
    sensitive << ( ap_condition_137 );
    sensitive << ( ap_condition_283 );
    sensitive << ( ap_condition_142 );
    sensitive << ( ap_condition_288 );
    sensitive << ( ap_condition_280 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( re_read_reg_210_pp0_iter2_reg );
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );
    sensitive << ( icmp_ln20_reg_247 );
    sensitive << ( icmp_ln39_reg_256 );

    SC_METHOD(thread_saved_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( zext_ln9_fu_102_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_saved_address1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( saved_addr_reg_227_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_saved_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_saved_ce1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );

    SC_METHOD(thread_saved_d1);
    sensitive << ( or_ln17_reg_238 );
    sensitive << ( temp2_1_reg_242 );
    sensitive << ( temp_1_reg_251 );
    sensitive << ( ap_condition_293 );

    SC_METHOD(thread_saved_we1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( we_read_reg_214_pp0_iter2_reg );
    sensitive << ( or_ln17_reg_238 );

    SC_METHOD(thread_temp2_1_fu_136_p2);
    sensitive << ( store );

    SC_METHOD(thread_temp_1_fu_160_p2);
    sensitive << ( temp_reg_233 );

    SC_METHOD(thread_zext_ln24_fu_192_p1);
    sensitive << ( addr_read_reg_218_pp0_iter2_reg );

    SC_METHOD(thread_zext_ln28_fu_196_p1);
    sensitive << ( tempOutAddr );

    SC_METHOD(thread_zext_ln43_fu_201_p1);
    sensitive << ( addr_read_reg_218_pp0_iter2_reg );

    SC_METHOD(thread_zext_ln47_fu_205_p1);
    sensitive << ( tempOutAddr );

    SC_METHOD(thread_zext_ln58_fu_187_p1);
    sensitive << ( tempOutAddr );

    SC_METHOD(thread_zext_ln9_fu_102_p1);
    sensitive << ( addr );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    store = "00000000";
    tempOutAddr = "0000000";
    prevAddr = "0000000";
    tempOutVal = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, addr, "(port)addr");
    sc_trace(mVcdFile, we, "(port)we");
    sc_trace(mVcdFile, re, "(port)re");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, saved_address0, "saved_address0");
    sc_trace(mVcdFile, saved_ce0, "saved_ce0");
    sc_trace(mVcdFile, saved_q0, "saved_q0");
    sc_trace(mVcdFile, saved_address1, "saved_address1");
    sc_trace(mVcdFile, saved_ce1, "saved_ce1");
    sc_trace(mVcdFile, saved_we1, "saved_we1");
    sc_trace(mVcdFile, saved_d1, "saved_d1");
    sc_trace(mVcdFile, store, "store");
    sc_trace(mVcdFile, tempOutAddr, "tempOutAddr");
    sc_trace(mVcdFile, prevAddr, "prevAddr");
    sc_trace(mVcdFile, tempOutVal, "tempOutVal");
    sc_trace(mVcdFile, re_read_reg_210, "re_read_reg_210");
    sc_trace(mVcdFile, re_read_reg_210_pp0_iter1_reg, "re_read_reg_210_pp0_iter1_reg");
    sc_trace(mVcdFile, re_read_reg_210_pp0_iter2_reg, "re_read_reg_210_pp0_iter2_reg");
    sc_trace(mVcdFile, we_read_reg_214, "we_read_reg_214");
    sc_trace(mVcdFile, we_read_reg_214_pp0_iter1_reg, "we_read_reg_214_pp0_iter1_reg");
    sc_trace(mVcdFile, we_read_reg_214_pp0_iter2_reg, "we_read_reg_214_pp0_iter2_reg");
    sc_trace(mVcdFile, addr_read_reg_218, "addr_read_reg_218");
    sc_trace(mVcdFile, addr_read_reg_218_pp0_iter1_reg, "addr_read_reg_218_pp0_iter1_reg");
    sc_trace(mVcdFile, addr_read_reg_218_pp0_iter2_reg, "addr_read_reg_218_pp0_iter2_reg");
    sc_trace(mVcdFile, saved_addr_reg_227, "saved_addr_reg_227");
    sc_trace(mVcdFile, saved_addr_reg_227_pp0_iter1_reg, "saved_addr_reg_227_pp0_iter1_reg");
    sc_trace(mVcdFile, saved_addr_reg_227_pp0_iter2_reg, "saved_addr_reg_227_pp0_iter2_reg");
    sc_trace(mVcdFile, temp_reg_233, "temp_reg_233");
    sc_trace(mVcdFile, or_ln17_fu_130_p2, "or_ln17_fu_130_p2");
    sc_trace(mVcdFile, or_ln17_reg_238, "or_ln17_reg_238");
    sc_trace(mVcdFile, temp2_1_fu_136_p2, "temp2_1_fu_136_p2");
    sc_trace(mVcdFile, temp2_1_reg_242, "temp2_1_reg_242");
    sc_trace(mVcdFile, icmp_ln20_fu_148_p2, "icmp_ln20_fu_148_p2");
    sc_trace(mVcdFile, icmp_ln20_reg_247, "icmp_ln20_reg_247");
    sc_trace(mVcdFile, temp_1_fu_160_p2, "temp_1_fu_160_p2");
    sc_trace(mVcdFile, temp_1_reg_251, "temp_1_reg_251");
    sc_trace(mVcdFile, icmp_ln39_fu_165_p2, "icmp_ln39_fu_165_p2");
    sc_trace(mVcdFile, icmp_ln39_reg_256, "icmp_ln39_reg_256");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln9_fu_102_p1, "zext_ln9_fu_102_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, zext_ln58_fu_187_p1, "zext_ln58_fu_187_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, zext_ln24_fu_192_p1, "zext_ln24_fu_192_p1");
    sc_trace(mVcdFile, zext_ln28_fu_196_p1, "zext_ln28_fu_196_p1");
    sc_trace(mVcdFile, zext_ln43_fu_201_p1, "zext_ln43_fu_201_p1");
    sc_trace(mVcdFile, zext_ln47_fu_205_p1, "zext_ln47_fu_205_p1");
    sc_trace(mVcdFile, icmp_ln17_fu_115_p2, "icmp_ln17_fu_115_p2");
    sc_trace(mVcdFile, icmp_ln17_1_fu_124_p2, "icmp_ln17_1_fu_124_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to2, "ap_idle_pp0_0to2");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_block_pp0, "ap_block_pp0");
    sc_trace(mVcdFile, ap_enable_operation_10, "ap_enable_operation_10");
    sc_trace(mVcdFile, ap_enable_state1_pp0_iter0_stage0, "ap_enable_state1_pp0_iter0_stage0");
    sc_trace(mVcdFile, ap_enable_operation_12, "ap_enable_operation_12");
    sc_trace(mVcdFile, ap_enable_state2_pp0_iter1_stage0, "ap_enable_state2_pp0_iter1_stage0");
    sc_trace(mVcdFile, ap_predicate_op58_store_state4, "ap_predicate_op58_store_state4");
    sc_trace(mVcdFile, ap_enable_operation_58, "ap_enable_operation_58");
    sc_trace(mVcdFile, ap_enable_state4_pp0_iter3_stage0, "ap_enable_state4_pp0_iter3_stage0");
    sc_trace(mVcdFile, ap_predicate_op69_store_state4, "ap_predicate_op69_store_state4");
    sc_trace(mVcdFile, ap_enable_operation_69, "ap_enable_operation_69");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_137, "ap_condition_137");
    sc_trace(mVcdFile, ap_condition_283, "ap_condition_283");
    sc_trace(mVcdFile, ap_condition_142, "ap_condition_142");
    sc_trace(mVcdFile, ap_condition_288, "ap_condition_288");
    sc_trace(mVcdFile, ap_condition_280, "ap_condition_280");
    sc_trace(mVcdFile, ap_condition_293, "ap_condition_293");
    sc_trace(mVcdFile, ap_condition_226, "ap_condition_226");
#endif

    }
    mHdltvinHandle.open("mem.hdltvin.dat");
    mHdltvoutHandle.open("mem.hdltvout.dat");
}

mem::~mem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete saved_U;
}

void mem::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_226.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_1)) {
            store = temp_1_fu_160_p2.read();
        } else if (esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_0)) {
            store = temp2_1_fu_136_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_226.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln39_fu_165_p2.read()))) {
            tempOutVal = temp_1_fu_160_p2.read();
        } else if ((esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_148_p2.read()))) {
            tempOutVal = temp2_1_fu_136_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        addr_read_reg_218 = addr.read();
        addr_read_reg_218_pp0_iter1_reg = addr_read_reg_218.read();
        re_read_reg_210 = re.read();
        re_read_reg_210_pp0_iter1_reg = re_read_reg_210.read();
        saved_addr_reg_227 =  (sc_lv<7>) (zext_ln9_fu_102_p1.read());
        saved_addr_reg_227_pp0_iter1_reg = saved_addr_reg_227.read();
        we_read_reg_214 = we.read();
        we_read_reg_214_pp0_iter1_reg = we_read_reg_214.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        addr_read_reg_218_pp0_iter2_reg = addr_read_reg_218_pp0_iter1_reg.read();
        re_read_reg_210_pp0_iter2_reg = re_read_reg_210_pp0_iter1_reg.read();
        saved_addr_reg_227_pp0_iter2_reg = saved_addr_reg_227_pp0_iter1_reg.read();
        we_read_reg_214_pp0_iter2_reg = we_read_reg_214_pp0_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(we_read_reg_214_pp0_iter1_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_0))) {
        icmp_ln20_reg_247 = icmp_ln20_fu_148_p2.read();
        temp2_1_reg_242 = temp2_1_fu_136_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(we_read_reg_214_pp0_iter1_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_1))) {
        icmp_ln39_reg_256 = icmp_ln39_fu_165_p2.read();
        temp_1_reg_251 = temp_1_fu_160_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(we_read_reg_214_pp0_iter1_reg.read(), ap_const_lv1_1))) {
        or_ln17_reg_238 = or_ln17_fu_130_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(we_read_reg_214_pp0_iter1_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(we_read_reg_214_pp0_iter1_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(or_ln17_fu_130_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        prevAddr = addr_read_reg_218_pp0_iter1_reg.read();
    }
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_reg_247.read())) || (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln39_reg_256.read())))) {
        tempOutAddr = addr_read_reg_218_pp0_iter2_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        temp_reg_233 = saved_q0.read();
    }
}

void mem::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void mem::thread_ap_block_pp0() {
    ap_block_pp0 = (esl_seteq<1,1,1>(ap_ST_fsm_pp0_stage0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_pp0_stage0_subdone.read()));
}

void mem::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void mem::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void mem::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void mem::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void mem::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_condition_137() {
    ap_condition_137 = (esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_reg_247.read()));
}

void mem::thread_ap_condition_142() {
    ap_condition_142 = (esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln39_reg_256.read()));
}

void mem::thread_ap_condition_226() {
    ap_condition_226 = (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(we_read_reg_214_pp0_iter1_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()));
}

void mem::thread_ap_condition_280() {
    ap_condition_280 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(re_read_reg_210_pp0_iter2_reg.read(), ap_const_lv1_1));
}

void mem::thread_ap_condition_283() {
    ap_condition_283 = (esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_reg_247.read()));
}

void mem::thread_ap_condition_288() {
    ap_condition_288 = (esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_reg_256.read()));
}

void mem::thread_ap_condition_293() {
    ap_condition_293 = (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1));
}

void mem::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mem::thread_ap_enable_operation_10() {
    ap_enable_operation_10 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_enable_operation_12() {
    ap_enable_operation_12 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_enable_operation_58() {
    ap_enable_operation_58 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op58_store_state4.read());
}

void mem::thread_ap_enable_operation_69() {
    ap_enable_operation_69 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op69_store_state4.read());
}

void mem::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void mem::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void mem::thread_ap_enable_state1_pp0_iter0_stage0() {
    ap_enable_state1_pp0_iter0_stage0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1));
}

void mem::thread_ap_enable_state2_pp0_iter1_stage0() {
    ap_enable_state2_pp0_iter1_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1));
}

void mem::thread_ap_enable_state4_pp0_iter3_stage0() {
    ap_enable_state4_pp0_iter3_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1));
}

void mem::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mem::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void mem::thread_ap_idle_pp0_0to2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0_0to2 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to2 = ap_const_logic_0;
    }
}

void mem::thread_ap_predicate_op58_store_state4() {
    ap_predicate_op58_store_state4 = (esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0));
}

void mem::thread_ap_predicate_op69_store_state4() {
    ap_predicate_op69_store_state4 = (esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1));
}

void mem::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mem::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to2.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void mem::thread_icmp_ln17_1_fu_124_p2() {
    icmp_ln17_1_fu_124_p2 = (!tempOutVal.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(tempOutVal.read() == ap_const_lv8_0);
}

void mem::thread_icmp_ln17_fu_115_p2() {
    icmp_ln17_fu_115_p2 = (!prevAddr.read().is_01() || !addr_read_reg_218_pp0_iter1_reg.read().is_01())? sc_lv<1>(): sc_lv<1>(prevAddr.read() != addr_read_reg_218_pp0_iter1_reg.read());
}

void mem::thread_icmp_ln20_fu_148_p2() {
    icmp_ln20_fu_148_p2 = (!temp2_1_fu_136_p2.read().is_01() || !tempOutVal.read().is_01())? sc_lv<1>(): (sc_biguint<8>(temp2_1_fu_136_p2.read()) < sc_biguint<8>(tempOutVal.read()));
}

void mem::thread_icmp_ln39_fu_165_p2() {
    icmp_ln39_fu_165_p2 = (!temp_1_fu_160_p2.read().is_01() || !tempOutVal.read().is_01())? sc_lv<1>(): (sc_biguint<8>(temp_1_fu_160_p2.read()) < sc_biguint<8>(tempOutVal.read()));
}

void mem::thread_or_ln17_fu_130_p2() {
    or_ln17_fu_130_p2 = (icmp_ln17_fu_115_p2.read() | icmp_ln17_1_fu_124_p2.read());
}

void mem::thread_out_r() {
    if (esl_seteq<1,1,1>(ap_condition_280.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_condition_288.read(), ap_const_boolean_1)) {
            out_r = zext_ln47_fu_205_p1.read();
        } else if (esl_seteq<1,1,1>(ap_condition_142.read(), ap_const_boolean_1)) {
            out_r = zext_ln43_fu_201_p1.read();
        } else if (esl_seteq<1,1,1>(ap_condition_283.read(), ap_const_boolean_1)) {
            out_r = zext_ln28_fu_196_p1.read();
        } else if (esl_seteq<1,1,1>(ap_condition_137.read(), ap_const_boolean_1)) {
            out_r = zext_ln24_fu_192_p1.read();
        } else if (esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_0)) {
            out_r = zext_ln58_fu_187_p1.read();
        } else {
            out_r = "XXXXXXXX";
        }
    } else {
        out_r = "XXXXXXXX";
    }
}

void mem::thread_out_r_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(re_read_reg_210_pp0_iter2_reg.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_reg_247.read()) && 
          esl_seteq<1,1,1>(re_read_reg_210_pp0_iter2_reg.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(re_read_reg_210_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_reg_247.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln39_reg_256.read()) && 
          esl_seteq<1,1,1>(re_read_reg_210_pp0_iter2_reg.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(re_read_reg_210_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_reg_256.read())))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void mem::thread_saved_address0() {
    saved_address0 =  (sc_lv<7>) (zext_ln9_fu_102_p1.read());
}

void mem::thread_saved_address1() {
    saved_address1 = saved_addr_reg_227_pp0_iter2_reg.read();
}

void mem::thread_saved_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        saved_ce0 = ap_const_logic_1;
    } else {
        saved_ce0 = ap_const_logic_0;
    }
}

void mem::thread_saved_ce1() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1)))) {
        saved_ce1 = ap_const_logic_1;
    } else {
        saved_ce1 = ap_const_logic_0;
    }
}

void mem::thread_saved_d1() {
    if (esl_seteq<1,1,1>(ap_condition_293.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1)) {
            saved_d1 = temp_1_reg_251.read();
        } else if (esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0)) {
            saved_d1 = temp2_1_reg_242.read();
        } else {
            saved_d1 = "XXXXXXXX";
        }
    } else {
        saved_d1 = "XXXXXXXX";
    }
}

void mem::thread_saved_we1() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_214_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(or_ln17_reg_238.read(), ap_const_lv1_1)))) {
        saved_we1 = ap_const_logic_1;
    } else {
        saved_we1 = ap_const_logic_0;
    }
}

void mem::thread_temp2_1_fu_136_p2() {
    temp2_1_fu_136_p2 = (!store.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(store.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void mem::thread_temp_1_fu_160_p2() {
    temp_1_fu_160_p2 = (!temp_reg_233.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(temp_reg_233.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void mem::thread_zext_ln24_fu_192_p1() {
    zext_ln24_fu_192_p1 = esl_zext<8,7>(addr_read_reg_218_pp0_iter2_reg.read());
}

void mem::thread_zext_ln28_fu_196_p1() {
    zext_ln28_fu_196_p1 = esl_zext<8,7>(tempOutAddr.read());
}

void mem::thread_zext_ln43_fu_201_p1() {
    zext_ln43_fu_201_p1 = esl_zext<8,7>(addr_read_reg_218_pp0_iter2_reg.read());
}

void mem::thread_zext_ln47_fu_205_p1() {
    zext_ln47_fu_205_p1 = esl_zext<8,7>(tempOutAddr.read());
}

void mem::thread_zext_ln58_fu_187_p1() {
    zext_ln58_fu_187_p1 = esl_zext<8,7>(tempOutAddr.read());
}

void mem::thread_zext_ln9_fu_102_p1() {
    zext_ln9_fu_102_p1 = esl_zext<64,7>(addr.read());
}

void mem::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void mem::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"addr\" :  \"" << addr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"we\" :  \"" << we.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"re\" :  \"" << re.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> mem::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> mem::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mem::ap_const_boolean_1 = true;
const bool mem::ap_const_boolean_0 = false;
const sc_lv<1> mem::ap_const_lv1_1 = "1";
const sc_lv<1> mem::ap_const_lv1_0 = "0";
const sc_lv<8> mem::ap_const_lv8_1 = "1";

mem::mem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    saved_U = new mem_saved("saved_U");
    saved_U->clk(ap_clk);
    saved_U->reset(ap_rst);
    saved_U->address0(saved_address0);
    saved_U->ce0(saved_ce0);
    saved_U->q0(saved_q0);
    saved_U->address1(saved_address1);
    saved_U->ce1(saved_ce1);
    saved_U->we1(saved_we1);
    saved_U->d1(temp_1_reg_158);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_condition_198);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( re_read_reg_133_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_operation_10);

    SC_METHOD(thread_ap_enable_operation_12);

    SC_METHOD(thread_ap_enable_operation_42);
    sensitive << ( we_read_reg_137_pp0_iter2_reg );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_enable_state1_pp0_iter0_stage0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );

    SC_METHOD(thread_ap_enable_state2_pp0_iter1_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_enable_state4_pp0_iter3_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle_pp0_0to2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to2 );

    SC_METHOD(thread_icmp_ln14_fu_109_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tempOutVal );
    sensitive << ( we_read_reg_137_pp0_iter2_reg );
    sensitive << ( temp_1_reg_158 );

    SC_METHOD(thread_out_r);
    sensitive << ( we_read_reg_137_pp0_iter2_reg );
    sensitive << ( icmp_ln14_fu_109_p2 );
    sensitive << ( zext_ln32_fu_100_p1 );
    sensitive << ( zext_ln18_fu_124_p1 );
    sensitive << ( zext_ln22_fu_128_p1 );
    sensitive << ( ap_condition_198 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( re_read_reg_133_pp0_iter2_reg );
    sensitive << ( we_read_reg_137_pp0_iter2_reg );
    sensitive << ( icmp_ln14_fu_109_p2 );

    SC_METHOD(thread_saved_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( zext_ln8_fu_86_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_saved_address1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( saved_addr_reg_147_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_saved_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_saved_ce1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_saved_we1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( we_read_reg_137_pp0_iter2_reg );

    SC_METHOD(thread_temp_1_fu_91_p2);
    sensitive << ( temp_reg_153 );

    SC_METHOD(thread_zext_ln18_fu_124_p1);
    sensitive << ( addr_read_reg_141_pp0_iter2_reg );

    SC_METHOD(thread_zext_ln22_fu_128_p1);
    sensitive << ( tempOutAddr );

    SC_METHOD(thread_zext_ln32_fu_100_p1);
    sensitive << ( tempOutAddr );

    SC_METHOD(thread_zext_ln8_fu_86_p1);
    sensitive << ( addr );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    tempOutAddr = "0000000";
    tempOutVal = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, addr, "(port)addr");
    sc_trace(mVcdFile, we, "(port)we");
    sc_trace(mVcdFile, re, "(port)re");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, saved_address0, "saved_address0");
    sc_trace(mVcdFile, saved_ce0, "saved_ce0");
    sc_trace(mVcdFile, saved_q0, "saved_q0");
    sc_trace(mVcdFile, saved_address1, "saved_address1");
    sc_trace(mVcdFile, saved_ce1, "saved_ce1");
    sc_trace(mVcdFile, saved_we1, "saved_we1");
    sc_trace(mVcdFile, tempOutAddr, "tempOutAddr");
    sc_trace(mVcdFile, tempOutVal, "tempOutVal");
    sc_trace(mVcdFile, re_read_reg_133, "re_read_reg_133");
    sc_trace(mVcdFile, re_read_reg_133_pp0_iter1_reg, "re_read_reg_133_pp0_iter1_reg");
    sc_trace(mVcdFile, re_read_reg_133_pp0_iter2_reg, "re_read_reg_133_pp0_iter2_reg");
    sc_trace(mVcdFile, we_read_reg_137, "we_read_reg_137");
    sc_trace(mVcdFile, we_read_reg_137_pp0_iter1_reg, "we_read_reg_137_pp0_iter1_reg");
    sc_trace(mVcdFile, we_read_reg_137_pp0_iter2_reg, "we_read_reg_137_pp0_iter2_reg");
    sc_trace(mVcdFile, addr_read_reg_141, "addr_read_reg_141");
    sc_trace(mVcdFile, addr_read_reg_141_pp0_iter1_reg, "addr_read_reg_141_pp0_iter1_reg");
    sc_trace(mVcdFile, addr_read_reg_141_pp0_iter2_reg, "addr_read_reg_141_pp0_iter2_reg");
    sc_trace(mVcdFile, saved_addr_reg_147, "saved_addr_reg_147");
    sc_trace(mVcdFile, saved_addr_reg_147_pp0_iter1_reg, "saved_addr_reg_147_pp0_iter1_reg");
    sc_trace(mVcdFile, saved_addr_reg_147_pp0_iter2_reg, "saved_addr_reg_147_pp0_iter2_reg");
    sc_trace(mVcdFile, temp_reg_153, "temp_reg_153");
    sc_trace(mVcdFile, temp_1_fu_91_p2, "temp_1_fu_91_p2");
    sc_trace(mVcdFile, temp_1_reg_158, "temp_1_reg_158");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln8_fu_86_p1, "zext_ln8_fu_86_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln14_fu_109_p2, "icmp_ln14_fu_109_p2");
    sc_trace(mVcdFile, zext_ln32_fu_100_p1, "zext_ln32_fu_100_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, zext_ln18_fu_124_p1, "zext_ln18_fu_124_p1");
    sc_trace(mVcdFile, zext_ln22_fu_128_p1, "zext_ln22_fu_128_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to2, "ap_idle_pp0_0to2");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_block_pp0, "ap_block_pp0");
    sc_trace(mVcdFile, ap_enable_operation_10, "ap_enable_operation_10");
    sc_trace(mVcdFile, ap_enable_state1_pp0_iter0_stage0, "ap_enable_state1_pp0_iter0_stage0");
    sc_trace(mVcdFile, ap_enable_operation_12, "ap_enable_operation_12");
    sc_trace(mVcdFile, ap_enable_state2_pp0_iter1_stage0, "ap_enable_state2_pp0_iter1_stage0");
    sc_trace(mVcdFile, ap_enable_operation_42, "ap_enable_operation_42");
    sc_trace(mVcdFile, ap_enable_state4_pp0_iter3_stage0, "ap_enable_state4_pp0_iter3_stage0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_198, "ap_condition_198");
#endif

    }
    mHdltvinHandle.open("mem.hdltvin.dat");
    mHdltvoutHandle.open("mem.hdltvout.dat");
}

mem::~mem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete saved_U;
}

void mem::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        addr_read_reg_141 = addr.read();
        addr_read_reg_141_pp0_iter1_reg = addr_read_reg_141.read();
        re_read_reg_133 = re.read();
        re_read_reg_133_pp0_iter1_reg = re_read_reg_133.read();
        saved_addr_reg_147 =  (sc_lv<7>) (zext_ln8_fu_86_p1.read());
        saved_addr_reg_147_pp0_iter1_reg = saved_addr_reg_147.read();
        we_read_reg_137 = we.read();
        we_read_reg_137_pp0_iter1_reg = we_read_reg_137.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        addr_read_reg_141_pp0_iter2_reg = addr_read_reg_141_pp0_iter1_reg.read();
        re_read_reg_133_pp0_iter2_reg = re_read_reg_133_pp0_iter1_reg.read();
        saved_addr_reg_147_pp0_iter2_reg = saved_addr_reg_147_pp0_iter1_reg.read();
        we_read_reg_137_pp0_iter2_reg = we_read_reg_137_pp0_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln14_fu_109_p2.read(), ap_const_lv1_0))) {
        tempOutAddr = addr_read_reg_141_pp0_iter2_reg.read();
        tempOutVal = temp_1_reg_158.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(we_read_reg_137_pp0_iter1_reg.read(), ap_const_lv1_1))) {
        temp_1_reg_158 = temp_1_fu_91_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        temp_reg_153 = saved_q0.read();
    }
}

void mem::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void mem::thread_ap_block_pp0() {
    ap_block_pp0 = (esl_seteq<1,1,1>(ap_ST_fsm_pp0_stage0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_pp0_stage0_subdone.read()));
}

void mem::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void mem::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void mem::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void mem::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void mem::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_condition_198() {
    ap_condition_198 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(re_read_reg_133_pp0_iter2_reg.read(), ap_const_lv1_1));
}

void mem::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mem::thread_ap_enable_operation_10() {
    ap_enable_operation_10 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_enable_operation_12() {
    ap_enable_operation_12 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem::thread_ap_enable_operation_42() {
    ap_enable_operation_42 = esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_1);
}

void mem::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void mem::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void mem::thread_ap_enable_state1_pp0_iter0_stage0() {
    ap_enable_state1_pp0_iter0_stage0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1));
}

void mem::thread_ap_enable_state2_pp0_iter1_stage0() {
    ap_enable_state2_pp0_iter1_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1));
}

void mem::thread_ap_enable_state4_pp0_iter3_stage0() {
    ap_enable_state4_pp0_iter3_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1));
}

void mem::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mem::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void mem::thread_ap_idle_pp0_0to2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0_0to2 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to2 = ap_const_logic_0;
    }
}

void mem::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mem::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to2.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void mem::thread_icmp_ln14_fu_109_p2() {
    icmp_ln14_fu_109_p2 = (!temp_1_reg_158.read().is_01() || !tempOutVal.read().is_01())? sc_lv<1>(): (sc_biguint<8>(temp_1_reg_158.read()) < sc_biguint<8>(tempOutVal.read()));
}

void mem::thread_out_r() {
    if (esl_seteq<1,1,1>(ap_condition_198.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_109_p2.read()))) {
            out_r = zext_ln22_fu_128_p1.read();
        } else if ((esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(icmp_ln14_fu_109_p2.read(), ap_const_lv1_0))) {
            out_r = zext_ln18_fu_124_p1.read();
        } else if (esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_0)) {
            out_r = zext_ln32_fu_100_p1.read();
        } else {
            out_r = "XXXXXXXX";
        }
    } else {
        out_r = "XXXXXXXX";
    }
}

void mem::thread_out_r_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(re_read_reg_133_pp0_iter2_reg.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(icmp_ln14_fu_109_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(re_read_reg_133_pp0_iter2_reg.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(re_read_reg_133_pp0_iter2_reg.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_109_p2.read())))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void mem::thread_saved_address0() {
    saved_address0 =  (sc_lv<7>) (zext_ln8_fu_86_p1.read());
}

void mem::thread_saved_address1() {
    saved_address1 = saved_addr_reg_147_pp0_iter2_reg.read();
}

void mem::thread_saved_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        saved_ce0 = ap_const_logic_1;
    } else {
        saved_ce0 = ap_const_logic_0;
    }
}

void mem::thread_saved_ce1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        saved_ce1 = ap_const_logic_1;
    } else {
        saved_ce1 = ap_const_logic_0;
    }
}

void mem::thread_saved_we1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(we_read_reg_137_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        saved_we1 = ap_const_logic_1;
    } else {
        saved_we1 = ap_const_logic_0;
    }
}

void mem::thread_temp_1_fu_91_p2() {
    temp_1_fu_91_p2 = (!temp_reg_153.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(temp_reg_153.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void mem::thread_zext_ln18_fu_124_p1() {
    zext_ln18_fu_124_p1 = esl_zext<8,7>(addr_read_reg_141_pp0_iter2_reg.read());
}

void mem::thread_zext_ln22_fu_128_p1() {
    zext_ln22_fu_128_p1 = esl_zext<8,7>(tempOutAddr.read());
}

void mem::thread_zext_ln32_fu_100_p1() {
    zext_ln32_fu_100_p1 = esl_zext<8,7>(tempOutAddr.read());
}

void mem::thread_zext_ln8_fu_86_p1() {
    zext_ln8_fu_86_p1 = esl_zext<64,7>(addr.read());
}

void mem::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void mem::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"addr\" :  \"" << addr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"we\" :  \"" << we.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"re\" :  \"" << re.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

